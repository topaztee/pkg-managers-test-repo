<Playlist Version="1.0"><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate does not update when a dependency constrain is not met" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with no targets import" /><Add Test="Paket.JSONLDSpecs.can extract all versions from Rx-Platformservice.json" /><Add Test="Paket.InstallModel.Xml.RefactoringEssentialsSpec.should generate Xml for RefactoringEssentials in VisualBasic project" /><Add Test="Paket.UtilsSpecs.disposable env var should delete value" /><Add Test="Paket.InstallModel.AnalyzerSpecs.Directory name is cases sensitive" /><Add Test="Paket.Simplifier.BasicScenarioSpecs.should not simplify framework restrictions in empty file" /><Add Test="Paket.ProjectFile.FileBuildActionSpecs.should recognize content files" /><Add Test="Paket.DependenciesFile.DependencyChangesSpecs.should detect removal of group" /><Add Test="Paket.InstallModel.ProcessingSpecs.should filter .NET 4.5 dlls for System.Net.Http 2.2.8" /><Add Test="Paket.SemVerSpecs.should accept SemVer2 prereleases" /><Add Test="Paket.ReferencesFileSpecs.should not add nuget package twice" /><Add Test="Paket.TemplateFile.Test.skip comment lines" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate updates package that conflicts with a transitive dependency with correct version" /><Add Test="Paket.NugetVersionRangeParserSpecs.can detect range version with prerelease" /><Add Test="Paket.TemplateFile.Test.Parsing minimal file based packages works(&quot;type file\nid My.Thing\nauthors Bob McBob\ndescription\n    description starting with description\nversion\n    1.0\n&quot;,&quot;description starting with description&quot;)" /><Add Test="Paket.Simplifier.BasicScenarioSpecs.should simplify subset of framework restrictions in every group" /><Add Test="Paket.ProjectFile.OutputSpecs.should detect output path for proj file(&quot;Project2&quot;,&quot;Release&quot;)" /><Add Test="Paket.InstallModel.ProcessingSpecs.should add portable lib" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate updates all packages constraining version" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should add new packages with nuget package resolution strategy" /><Add Test="Paket.DependenciesFile.VersionRequirementSpecs.can order simple at least requirements in package requirement" /><Add Test="Paket.SemVerSpecs.should parse CoreClr prerelease versions" /><Add Test="Paket.ProjectFile.InterProjectDependencySpecs.should detect relative path for dependencies in Project2 proj file" /><Add Test="Paket.UtilsSpecs.relative path with local identifier" /><Add Test="Paket.DependenciesFile.DependencyChangesSpecs.should detect remove of single nuget package" /><Add Test="Paket.FilterVersionSpecs.does include prerelease when twiddle wakka" /><Add Test="Paket.InstallModel.Xml.SystemSpatialSpecs.should generate Xml for System.Spatial" /><Add Test="Paket.Resolver.GlobalPessimisticStrategySpecs.should favor global strategy to resolve strategy override conflicts" /><Add Test="Paket.Resolver.SimpleDependenciesSpecs.should resolve simple config1" /><Add Test="Paket.ProjectFile.InterProjectDependencySpecs.should detect Paket and Paket.Core dependency in Project2 proj file" /><Add Test="Paket.InstallModel.ProcessingSpecs.should not install tools" /><Add Test="Paket.ConflictGraphSpecs.should analyze graph and report conflict" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate does not conflict with a transitive dependency of another package when paket.dependencies requirement has changed" /><Add Test="Paket.InstallModel.AnalyzerSpecs.Can create analyzer lib" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read simple config with comments" /><Add Test="Paket.ProjectFile.TargetFrameworkSpecs.should detect portable profile" /><Add Test="Paket.Simplifier.BasicScenarioSpecs.should remove all transitive dependencies from dep file with multiple groups" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate updates a single package" /><Add Test="Paket.UtilsSpecs.createRelativePath should handle spaces" /><Add Test="Paket.ProjectFile.ProjectLanguageSpecs.Language is Unknown if guid is empty" /><Add Test="Paket.NuspecSpecs.can detect no framework assemblies for Fantomas" /><Add Test="Paket.ProjectFile.ConditionSpecs.should detect client framework version from Lib path" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with content none" /><Add Test="Paket.SemVerSpecs.can parse FSharp.Data versions" /><Add Test="Paket.FrameworkReferencesSpecs.should detect empty framework references in empty project" /><Add Test="Paket.SemVerSpecs.can normalize build zeros in prerelease" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read strict config" /><Add Test="Paket.LockFile.GeneratorSpecs.should generate other version ranges for packages" /><Add Test="Paket.ConflictGraphSpecs.should analyze graph2 and report conflict" /><Add Test="Paket.InstallModel.Given a path.it should return no penalty for a matching .NET framework" /><Add Test="Paket.NuspecWriterSpecs.should not serialize all properties" /><Add Test="Paket.Resolver.ConflictSourcesSpecs.should resolve source files with correct sha" /><Add Test="Paket.NuspecSpecs.can detect framework assemblies for FSharp.Data.SqlEnumProvider" /><Add Test="Paket.ProjectFile.OutputSpecs.should detect lib output type for Project1 proj file" /><Add Test="Paket.SemVerSpecs.should compare CoreClr prerelease versions" /><Add Test="GlobalOptimisticStrategySpecs.should resolve simple config2" /><Add Test="Paket.InstallModel.ProcessingSpecs.should install not use net40-full for client profile" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate with SemVerUpdateMode.Minor updates package from a specific group in minor version" /><Add Test="Paket.FilterVersionSpecs.can support alpha version" /><Add Test="Paket.ConfigFileSpecs.get username and password from node" /><Add Test="Paket.NuspecSpecs.can detect license for SqlCLient" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with single-quoted password source" /><Add Test="Paket.DependencySetSpecs.should optimize real world restrictions 2" /><Add Test="Paket.LockFile.ParserSpecs.should parse own lock file2" /><Add Test="Paket.RestrictionFilterSpecs.should filter &gt;= net40 and &gt;= net20 &lt; net46" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate updates package from main group" /><Add Test="GlobalOptimisticStrategySpecs.should favor strategy from parent that overrides strategy" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with specific framework" /><Add Test="Paket.InstallModel.FrameworkConditionsSpecs.should create nested condition for .NET Framework and Silverlight" /><Add Test="Paket.InstallModel.ProcessingSpecs.should put _._ files into right buckets" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate removes a dependency when it is updated to a version that does not depend on a library" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read http source file from config without quotes with file specs and project" /><Add Test="Paket.NuspecSpecs.can detect framework assemblies for Microsoft.Net.Http" /><Add Test="Paket.InstallModel.Given a target platform.it should return the right penalty for a compatible platform" /><Add Test="Paket.ProjectFile.ConditionSpecs.should detect 35, 40 and 45" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with multiple sources" /><Add Test="Paket.SemVerSpecs.newer beta versions have higher precedence" /><Add Test="Paket.RestrictionFilterSpecs.should filter &gt;= net20 &lt; net46 and &gt;= net40" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config which only contains a source" /><Add Test="Paket.TemplateFile.Test.Valid file input recognised as valid(&quot;type file\nid My.Thing\nauthors Bob McBob\ndescription A short description\n&quot;)" /><Add Test="Paket.ProjectFile.ConditionSpecs.should detect CLR version from path" /><Add Test="Paket.Resolver.GlobalPessimisticStrategySpecs.should resolve simple config1" /><Add Test="Paket.LockFile.QuerySpecs.should detect transitive dependencies" /><Add Test="Paket.RestrictionFilterSpecs.should filter &gt;= net40 and net45" /><Add Test="Paket.ProjectFile.TargetFrameworkSpecs.should detect net40 in empty proj file" /><Add Test="Paket.FilterVersionSpecs.can support trailing 0" /><Add Test="Paket.LockFile.ParserSpecs.should parse lock file with groups" /><Add Test="Paket.NuspecWriterSpecs.should serialize core info" /><Add Test="Paket.RestrictionFilterSpecs.should filter &gt;= net45 &lt; net46 and &gt;= net40" /><Add Test="Paket.DependenciesFile.DependencyChangesSpecs.should detect removed github dependency" /><Add Test="Paket.DependenciesFile.SaveSpecs.should serialize no local copy config" /><Add Test="Paket.LockFile.GenerateWithOptionsSpecs.should resolve config with global framework restrictions" /><Add Test="Paket.ReferencesFileSpecs.should parse lines with CopyLocal and import_targets settings correctly" /><Add Test="Paket.NugetVersionRangeParserSpecs.can detect minimum version" /><Add Test="Paket.InstallModel.FrameworkIdentifierSpecs.should understand xamarinios" /><Add Test="Paket.NugetVersionRangeSerializerSpecs.can format less than version" /><Add Test="Paket.LockFile.GenerateWithOptionsSpecs.should generate content none lock file" /><Add Test="Paket.NuspecSpecs.can detect all references for FsXaml" /><Add Test="Paket.Resolver.SimpleDependenciesSpecs.should resolve prerelease config" /><Add Test="Paket.LockFile.ParserSpecs.should parse and serialize redirects lockfile" /><Add Test="Paket.Simplifier.BasicScenarioSpecs.should not simplify framework restrictions when not equal" /><Add Test="Paket.NuGetConfigSpecs.ignores disabled nuget feed" /><Add Test="Paket.ConflictGraphSpecs.should override graph3 conflict to package C" /><Add Test="Paket.UtilsSpecs.get http env proxy with port no credentials" /><Add Test="Paket.ReferencesFileSpecs.should serialize customPath correctly" /><Add Test="Paket.TemplateFile.Test.Detect multiple files correctly" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate updates a single package with constrained dependency in dependencies file" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should add pinned package version to new group" /><Add Test="Paket.AddingDependenciesSpecs.should find castle.core with explicit version + castle.windsor alone" /><Add Test="Paket.InstallModel.FrameworkConditionsSpecs.should create empty condition for empty profile list" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should add new packages with ~&gt; version if we give it" /><Add Test="Paket.WritePackagesConfigSpecs.can write xunit.visualstudio.packages.config" /><Add Test="Paket.TemplateFile.Test.Parsing minimal project based packages works(&quot;type project\n&quot;)" /><Add Test="Paket.TemplateFile.Test.Should resolve custom versions correctly" /><Add Test="Paket.Resolver.GlobalPessimisticStrategySpecs.should favor strategy override when updating all" /><Add Test="Paket.ProjectFile.InterProjectDependencySpecs.should detect Guids for dependencies in Project2 proj file" /><Add Test="Paket.InstallModel.ProcessingSpecs.should create empty model with net40, net45 ..." /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config without quotes" /><Add Test="Paket.ReferencesFileSpecs.should serialize import_targets correctly" /><Add Test="Paket.ProjectFile.OutputSpecs.should detect output path for proj file(&quot;ProjectWithConditions&quot;,&quot;Release&quot;)" /><Add Test="Paket.NuGetConfigSpecs.can parse config in XML node" /><Add Test="Paket.NugetVersionRangeSerializerSpecs.can format specific version" /><Add Test="Paket.FilterVersionSpecs.can check if in range for LessThan" /><Add Test="Paket.LockFile.ParserSpecs.should parse lock file" /><Add Test="Paket.InstallModel.Xml.EmptyLibsSpecs.should generate Xml for framework references and empty libs" /><Add Test="Paket.InstallModel.FrameworkIdentifierSpecs.should understand basic dnx" /><Add Test="Paket.ProjectFile.OutputSpecs.should detect framework profile for ProjectWithConditions file" /><Add Test="Paket.NuspecSpecs.can detect framework assemblies for SqlCLient" /><Add Test="Paket.CyclicGraphSpecs.should analyze graph completely" /><Add Test="Paket.LockFile.ParserSpecs.should parse strategy max lock file" /><Add Test="Paket.NugetVersionRangeParserSpecs.can detect specific version" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate updates early package that has a new dependent package that also is a direct dependency" /><Add Test="Paket.UtilsSpecs.disposable env var should override value" /><Add Test="Paket.ProjectFile.ProjectLanguageSpecs.Language is unknown when no information is provided" /><Add Test="Paket.InstallModel.Given a path.it should return the correct penalty for compatible .NET Frameworks" /><Add Test="Paket.InstallModel.FrameworkConditionsSpecs.should minimize condition if we have all .NET Frameworks" /><Add Test="Paket.BindingRedirects.replaces paket's node if one already exists" /><Add Test="Paket.NuspecSpecs.can detect dependencies for MathNet.Numerics" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should add new packages to the end" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with explizit main group" /><Add Test="Paket.DependenciesFile.DependencyChangesSpecs.should detect addition of single nuget package" /><Add Test="Paket.LockFile.GeneratorSpecs.should generate lock file for packages" /><Add Test="Paket.InstallModel.FrameworkIdentifierSpecs.should serialize xamarinios" /><Add Test="Paket.Resolver.SimpleDependenciesSpecs.should resolve simple config2" /><Add Test="Paket.InstallModel.Xml.CodeCrackerSpecs.should generate Xml for codecracker.CSharp in VisualBasic project" /><Add Test="Paket.DependenciesFile.SaveSpecs.should serialize config with all kinds of versions" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate installs new packages" /><Add Test="Paket.FilterVersionSpecs.can check if in range for Minimum" /><Add Test="Paket.InstallModel.ProcessingSpecs.should handle lib install of Jint for NET &gt;= 40 and SL &gt;= 50" /><Add Test="Paket.Simplifier.BasicScenarioSpecs.should simplify framework restrictions in every group" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config explicit versions" /><Add Test="Paket.NuGetConfigSpecs.can detect encrypted passwords in nuget.config" /><Add Test="Paket.NuspecSpecs.can detect explicit dependencies for WindowsAzure.Storage" /><Add Test="Paket.InstallModel.FrameworkIdentifierSpecs.should serialize xamarinmac" /><Add Test="Paket.DependencySetSpecs.filtered with empty restrictions should give full set" /><Add Test="Paket.InstallModel.ProcessingSpecs.should inherit _._ files to higher frameworks" /><Add Test="Paket.LockFile.ParserSpecs.should parse portable lockfile" /><Add Test="Paket.InstallModel.Xml.PlossumSpecs.should generate Xml for Plossum" /><Add Test="Paket.DependenciesFile.RemovePackageSpecs.should keep stable if package doesn't exist" /><Add Test="Paket.UtilsSpecs.no env proxy without https_proxy env var" /><Add Test="Paket.NuspecSpecs.can detect explicit in self made nuspec" /><Add Test="GlobalOptimisticStrategySpecs.should favor strategy from parent when it overrides" /><Add Test="Paket.UtilsSpecs.get http env proxy with bypass list" /><Add Test="Paket.DependenciesFile.SaveSpecs.should serialize config with gist and file" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should add Microsoft.AspNet.WebApi package in second group" /><Add Test="Paket.DependenciesFile.VersionRangeSpecs.can detect less-than" /><Add Test="Paket.DependenciesFile.SaveSpecs.should serialize config with gist" /><Add Test="Paket.LockFile.ParserSpecs.should parse lock file for http Stanford.NLP.NET project" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read http source file from config without quotes with file specs and project and query string after filename" /><Add Test="Paket.ProjectFile.OutputSpecs.should detect target framework for Project1 proj file" /><Add Test="Paket.ReferencesFileSpecs.should add nuget package" /><Add Test="Paket.ODataSpecs.can detect explicit dependencies for ReadOnlyCollectionExtensions" /><Add Test="Paket.InstallModel.Xml.FantomasSpecs.should generate Xml for Fantomas 1.5" /><Add Test="Paket.ProjectFile.OutputSpecs.should detect target framework for Project2 proj file" /><Add Test="Paket.TemplateFile.Test.Detect dependencies correctly(&quot;type file\nid My.Thing\nauthors Bob McBob\ndescription\n    A longer description\n    on two lines.\nversion\n    1.0\ndependencies\n     FSharp.Core 4.3.1\n     My.OtherThing\n&quot;)" /><Add Test="Paket.TemplateFile.Test.Parsing minimal file based packages works(&quot;type file\nid My.Thing\nauthors Bob McBob\ndescription\n    A longer description\n    on two lines.\nversion 1.0\n&quot;,&quot;A longer description\non two lines.&quot;)" /><Add Test="Paket.InstallModel.Xml.XUniRunnerSpecs.should generate Xml for xunit.runner.visualstudio 2.0.0" /><Add Test="Paket.InstallModel.ProcessingSpecs.should not use portable-net40 if we have net40" /><Add Test="Paket.InstallModel.Xml.MicrosoftCodeAnalysisAnalyzersSpecs.should generate Xml for Microsoft.CodeAnalysis.Analyzers in CSharp project" /><Add Test="Paket.Resolver.PessimisticStrategySpecs.should resolve simple config4" /><Add Test="Paket.SemVerSpecs.should accept version with leading zero" /><Add Test="Paket.InstallModel.FrameworkConditionsSpecs.should minimize condition if we have all WindowsProfiles" /><Add Test="Paket.InstallModel.Given a list of paths.it should find the best match for Silverlight 5" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should not fail if package already exists" /><Add Test="Paket.UtilsSpecs.mono runtime not reported on net platform" /><Add Test="Paket.InstallModel.Given a list of paths.it should find the best match for .NET 4.0" /><Add Test="Paket.ProjectFile.ProjectLanguageSpecs.Confusion between filename and ProjectTypeGuids is unknown" /><Add Test="Paket.DependencyGraphSpecs.should report missing top-level versions" /><Add Test="Paket.ProjectFile.TargetFrameworkSpecs.should detect silverlight framework in new silverlight project2" /><Add Test="Paket.LockFile.GeneratorSpecs.should generate lock file for http source files" /><Add Test="GlobalOptimisticStrategySpecs.should resolve simple config1" /><Add Test="Paket.RestrictionFilterSpecs.should filter net45 and &gt;= net40 &lt; net46" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate updates all packages not constraining version" /><Add Test="Paket.ReferencesFileSpecs.should parse reffiles with groups" /><Add Test="Paket.DependenciesFile.RemovePackageSpecs.should remove only the correct package" /><Add Test="Paket.SemVerSpecs.can parse semver strings and print the result" /><Add Test="Paket.LockFile.GeneratorSpecs.should generate lock file for http Stanford.NLP.NET project" /><Add Test="Paket.LockFile.GenerateWithOptionsSpecs.should generate redirects lock file" /><Add Test="Paket.NugetVersionRangeSerializerSpecs.can format greater than version" /><Add Test="Paket.ReferencesFileSpecs.should parse lines with CopyLocal settings correctly" /><Add Test="Paket.ProjectFile.ConditionSpecs.should detect net451" /><Add Test="Paket.LockFile.GeneratorSpecs.should generate lock file with no copy local for packages" /><Add Test="Paket.ProjectFile.ConditionSpecs.should detect WindowsPhone version from path" /><Add Test="Paket.DependencySetSpecs.empty set filtered with empty restrictions should give empty set" /><Add Test="Paket.NuspecSpecs.can detect developmentDependency is false for ReadOnlyCollectionExtions" /><Add Test="Paket.LockFile.GeneratorSpecs.should generate lock file with second group" /><Add Test="Paket.ReferencesFileSpecs.should serialize itself correctly" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with  !~&gt; 3.3" /><Add Test="Paket.DependenciesFile.SaveSpecs.should serialize config with additional group" /><Add Test="Paket.InstallModel.Xml.ManualNodesSpecs.should find custom Paket nodes in doc" /><Add Test="Paket.InstallModel.Given an empty path.it should be okay to use from .NET" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should pin in correct group" /><Add Test="Paket.JSONLDSpecs.can parse autocomplete response for packages" /><Add Test="Paket.ODataSpecs.can detect explicit dependencies for EasyNetQ" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with additional group" /><Add Test="GlobalOptimisticStrategySpecs.should favor strategy from top-level dependencies" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should add Microsoft.AspNet.WebApi package in correct position if package is already given with version" /><Add Test="Paket.InstallModel.Xml.GitInfoPlanterSpecs.should generate Xml for GitInfoPlanter2.0.0" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should add new packages with paket package resolution strategy" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with no redirects" /><Add Test="Paket.BindingRedirects.redirect tags are removed if we have no redirect empty sample docs" /><Add Test="Paket.InstallModel.ProcessingSpecs.should skip lib install of Microsoft.BCL for monotouch and monoandroid" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate updates package that conflicts with a transitive dependency in its own graph with correct version" /><Add Test="Paket.InstallModel.Xml.XUniRunnerSpecs.should not generate Xml for xunit.runner.visualstudio 2.0.0 if import is disabled" /><Add Test="Paket.LockFile.ParserSpecs.should parse lock file with framework restrictions" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate updates only packages from specified group" /><Add Test="Paket.Resolver.GlobalPessimisticStrategySpecs.should override global strategy" /><Add Test="Paket.ProjectFile.OutputSpecs.should detect output path for proj file(&quot;ProjectWithConditions&quot;,&quot;Debug&quot;)" /><Add Test="Paket.ReferencesFileSpecs.should parse lines correctly" /><Add Test="Paket.ProjectFile.ConditionSpecs.should detect Silverlight version from path" /><Add Test="Paket.InstallModel.Xml.FuchuSpecs.should generate Xml for Fuchu 0.4" /><Add Test="Paket.DependenciesFile.VersionRequirementSpecs.can order resolver strategy" /><Add Test="Paket.ProjectFile.ConditionSpecs.should detect net40-full as net40" /><Add Test="Paket.ConflictGraphSpecs.should resolve simple config with services" /><Add Test="Paket.TemplateFile.Test.Detect single file correctly" /><Add Test="Paket.RemotePushUrlSpecs.custom host with custom endpoint yields custom host with custom endpoint" /><Add Test="Paket.InstallModel.AnalyzerSpecs.Can convert directory to language" /><Add Test="Paket.WritePackagesConfigSpecs.can write asp.net.packages.config" /><Add Test="Paket.InstallModel.FrameworkIdentifierSpecs.should serialize silverlight framework identifier correctly" /><Add Test="Paket.ProjectFile.InterProjectDependencySpecs.should detect no dependencies in empty proj file" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should not fail if package already exists - case insensitive" /><Add Test="Paket.BindingRedirects.add new binding redirect to configuration file" /><Add Test="Paket.FilterVersionSpecs.can check if in range for Range" /><Add Test="Paket.Simplifier.BasicScenarioSpecs.should remove one level deep transitive dependencies from dep and ref files" /><Add Test="Paket.Resolver.CasingSpecs.should resolve wrong casing in config file" /><Add Test="Paket.NugetVersionRangeParserSpecs.can detect greater than version" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read content none config" /><Add Test="Paket.LockFile.ParserSpecs.should parse reactiveui lockfile" /><Add Test="Paket.DependenciesFile.VersionRangeSpecs.can detect override operator for beta" /><Add Test="Paket.DependencyGraphSpecs.should analyze graph completly" /><Add Test="Paket.DependenciesFile.ParserSpecs.should not read hhtml" /><Add Test="Paket.ProjectFile.OutputSpecs.should detect output path for proj file(&quot;Project1&quot;,&quot;Release&quot;)" /><Add Test="Paket.InstallModel.ProcessingSpecs.should handle lib install of NUnit 2.6 for windows 8" /><Add Test="Paket.DependenciesFile.VersionRangeSpecs.can detect minimum version" /><Add Test="Paket.DependencyGraphSpecs.should analyze graph one level deep" /><Add Test="Paket.ODataSpecs.can detect explicit dependencies for Rx-PlaformServices" /><Add Test="Paket.InstallModel.Xml.FantomasSpecs.should generate full Xml with reference condition for Fantomas 1.5" /><Add Test="Paket.NugetVersionRangeParserSpecs.can detect open range version" /><Add Test="Paket.AddingDependenciesSpecs.should find castle.core + castle.windsor alone" /><Add Test="Paket.DependenciesFile.SaveSpecs.should serialize no targets config" /><Add Test="Paket.DependenciesFile.VersionRequirementSpecs.can order naming and range" /><Add Test="Paket.ConfigFileSpecs.get token from node" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should add Microsoft.AspNet.WebApi package in first group" /><Add Test="Paket.InstallModel.Xml.MicrosoftBclBuildSpecs.should not install targets node for Microsoft.Bcl.Build" /><Add Test="Paket.BindingRedirects.adds paket's node if one does not exist" /><Add Test="Paket.ProjectFile.OutputSpecs.should detect exe output type for Project2 proj file" /><Add Test="Paket.Resolver.PessimisticStrategySpecs.should resolve simple config2" /><Add Test="Paket.NuspecWriterSpecs.should serialize frameworkAssemblues" /><Add Test="Paket.Resolver.GlobalPessimisticStrategySpecs.should resolve simple config4" /><Add Test="Paket.ODataSpecs.can calculate v3 path" /><Add Test="Paket.InstallModel.ProcessingSpecs.should filter .NET 4.0 dlls for System.Net.Http 2.2.8" /><Add Test="Paket.TemplateFile.Test.Parsing minimal file based packages works(&quot;type file\nid My.Thing\nversion 1.0\nauthors Bob McBob\ndescription A short description\n&quot;,&quot;A short description&quot;)" /><Add Test="Paket.LockFile.ParserSpecs.should parse no strategy lock file" /><Add Test="Paket.InstallModel.FrameworkIdentifierSpecs.should understand xamarinmac" /><Add Test="Paket.InstallModel.FrameworkConditionsSpecs.should create nested condition for two .NET Frameworks" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read github source files withou sha1" /><Add Test="Paket.DependenciesFile.VersionRequirementSpecs.can order twiddle-wakka in package requirement" /><Add Test="Paket.FilterVersionSpecs.does not skip version when twiddle wakka" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with package name containing nuget" /><Add Test="Paket.InstallModel.ProcessingSpecs.should understand net40 and net45" /><Add Test="Paket.InstallModel.Xml.SqlCLientSpecs.should generate Xml for FSharp.Data.SqlClient 1.4.4" /><Add Test="Paket.Simplifier.BasicScenarioSpecs.should remove all transitive dependencies from dep file recursively" /><Add Test="Paket.InstallModel.Xml.FantomasSpecs.should generate full Xml for Fantomas 1.5" /><Add Test="Paket.BindingRedirects.does not overwrite existing binding redirects for a different assembly" /><Add Test="Paket.RestrictionFilterSpecs.should filter &gt;= net40 and &gt;= net20 &lt; net40" /><Add Test="Paket.InstallModel.ProcessingSpecs.should use portable net40 in net45 when don't have other files" /><Add Test="Paket.DependenciesFile.DependencyChangesSpecs.should detect new github dependency" /><Add Test="Paket.Resolver.PessimisticStrategySpecs.should resolve simple config3" /><Add Test="Paket.DependenciesFile.VersionRequirementSpecs.can order simple at least requirements" /><Add Test="Paket.InstallModel.Xml.FantomasSpecs.should not generate full Xml for Fantomas 1.5 if not referenced" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read simple config" /><Add Test="Paket.DependenciesFile.DependencyChangesSpecs.should ignore compatible version requirement change for nuget package" /><Add Test="Paket.ReferencesFileSpecs.should parse and serialize reffiles with link false" /><Add Test="Paket.DependenciesFile.VersionRequirementSpecs.can parse doubled prerelease" /><Add Test="Paket.DependenciesFile.SaveSpecs.should serialize strict config" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config without versions" /><Add Test="Paket.DependenciesFile.VersionRequirementSpecs.can order alphabetical if everything else is equal" /><Add Test="Paket.FilterVersionSpecs.can check if in range for prerelease range" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with single framework restriction" /><Add Test="Paket.InstallModel.ProcessingSpecs.should filter _._ when processing blacklist" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config local quoted source" /><Add Test="Paket.TemplateFile.Test.Detect exclude files correctly" /><Add Test="Paket.InstallModel.ProcessingSpecs.should handle lib install of DotNetZip 1.9.3" /><Add Test="Paket.DependenciesFile.SaveSpecs.should serialize config with framework restriction" /><Add Test="Paket.SemVerSpecs.can compare semvers" /><Add Test="Paket.NuspecSpecs.can detect reference files for SqlCLient" /><Add Test="Paket.ProjectFile.OutputSpecs.should detect assembly name for Project3 proj file" /><Add Test="Paket.NuspecSpecs.can detect empty framework assemblies for ReadOnlyCollectionExtensions" /><Add Test="Paket.ODataSpecs.can detect explicit dependencies for Microsoft.AspNet.WebApi.Client" /><Add Test="Paket.UtilsSpecs.SMB path is returned as absolute path" /><Add Test="Paket.DependenciesFile.VersionRangeSpecs.can detect less-than-or-equal" /><Add Test="Paket.DependenciesFile.VersionRangeSpecs.can detect range" /><Add Test="Paket.TemplateFile.Test.Optional fields are read(&quot;type project\ntitle Chessie.Rop\nowners\n    Steffen Forkmann, Max Malook, Tomasz Heimowski\nauthors\n    Steffen Forkmann, Max Malook, Tomasz Heimowski\nprojectUrl\n    http://github.com/fsprojects/Chessie\niconUrl\n    https://raw.githubusercontent.com/fsprojects/Chessie/master/docs/files/img/logo.png\nlicenseUrl\n    http://github.com/fsprojects/Chessie/blob/master/LICENSE.txt\nrequireLicenseAcceptance\n    false\ncopyright\n    Copyright 2015\nLANGUAGE\n    en-gb\ntags\n    rop, fsharp F#\nsummary\n    Railway-oriented programming for .NET\ndependencies\n     FSharp.Core 4.3.1\n     My.OtherThing\nexcludeddependencies\n      Newtonsoft.Json\n      Chessie\ndescription\n    Railway-oriented programming for .NET&quot;)" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read github source file from config with quotes" /><Add Test="Paket.TemplateFile.Test.Parsing minimal file based packages works(&quot;type file\nid My.Thing\nversion 1.0\nauthors Bob McBob\ndescription\n    A longer description\n    on two lines.\n&quot;,&quot;A longer description\non two lines.&quot;)" /><Add Test="Paket.InstallModel.AnalyzerSpecs.Can convert directory name to language" /><Add Test="Paket.JSONLDSpecs.can parse autocomplete response for versions" /><Add Test="Paket.InstallModel.ProcessingSpecs.should handle Targets files" /><Add Test="Paket.TemplateFile.Test.parse real world template" /><Add Test="Paket.RestrictionFilterSpecs.should filter &gt;= net40 and &gt;= net45 &lt; net46" /><Add Test="Paket.InstallModel.ProcessingSpecs.should handle lib install of Microsoft.BCL for NET &gt;= 40" /><Add Test="Paket.DependenciesFile.SaveSpecs.should serialize content none config" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with framework restriction" /><Add Test="Paket.SemVerSpecs.trailing zeros are equal" /><Add Test="GlobalOptimisticStrategySpecs.should override global strategy" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should add new packages even to empty package section" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate updates package that conflicts with a deep transitive dependency of another package to correct version" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read github source file from config without quotes" /><Add Test="Paket.NuspecWriterSpecs.should serialize dependencies" /><Add Test="Paket.ConflictGraphSpecs.should resolve simple config with servers" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with min and no strategy" /><Add Test="Paket.Requirements.RestrictionApplicationSpecs.&gt;= sl30 contains all but only silverlight versions" /><Add Test="Paket.LockFile.GeneratorSpecs.should generate lock file for RavenDB.Client" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate updates package that conflicts with a transitive dependency of another package with correct version" /><Add Test="GlobalOptimisticStrategySpecs.should resolve simple config3" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read empty config" /><Add Test="Paket.ProjectFile.TargetFrameworkSpecs.should detect TargetFramework in Project2 proj file" /><Add Test="Paket.DependenciesFile.RemovePackageSpecs.should remove the right package" /><Add Test="Paket.FilterVersionSpecs.can check if in range for Maximum" /><Add Test="Paket.UtilsSpecs.absolute path with drive letter" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should add new packages to alphabetical position" /><Add Test="Paket.DependenciesFile.DependencyChangesSpecs.should repase detailed lock file" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with encapsulated password source" /><Add Test="Paket.DependenciesFile.VersionRangeSpecs.can detect prereleases" /><Add Test="Paket.InstallModel.Xml.RefactoringEssentialsSpec.should generate Xml for RefactoringEssentials in CSharp project" /><Add Test="Paket.FilterVersionSpecs.can check if in range for LessThan with prerelease" /><Add Test="Paket.RestrictionFilterSpecs.should filter &gt;= net20 &lt; net40 and &gt;= net40" /><Add Test="Paket.NugetVersionRangeParserSpecs.can detect less than version" /><Add Test="Paket.InstallModel.Given a list of paths+when I get the supported target profiles.it should contain profile 32" /><Add Test="Paket.RestrictionFilterSpecs.should filter net45 and &gt;= net40" /><Add Test="Paket.ReferencesFileSpecs.should parse custom path correctly" /><Add Test="Paket.DependencySetSpecs.should optimize real world restrictions 3" /><Add Test="Paket.DependenciesFile.SaveSpecs.should serialize config with http link" /><Add Test="Paket.ProjectFile.OutputSpecs.should detect output path for proj file(&quot;Project2&quot;,&quot;Debug&quot;)" /><Add Test="Paket.UtilsSpecs.should simplify path" /><Add Test="Paket.LockFile.GeneratorSpecs.should generate lock file with framework restrictions for packages" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with min and max strategy" /><Add Test="Paket.UtilsSpecs.disposable env var should set value" /><Add Test="Paket.FilterVersionSpecs.does not skip version when twiddle wakka with prerelease" /><Add Test="Paket.ProjectFile.ConditionSpecs.should detect framework version from path" /><Add Test="Paket.Resolver.GlobalPessimisticStrategySpecs.should favor strategy from top-level dependencies" /><Add Test="Paket.BindingRedirects.project file not containing paket.references is not marked for binding redirect" /><Add Test="Paket.InstallModel.FrameworkConditionsSpecs.should create nested condition for multiple .NET Frameworks" /><Add Test="Paket.ODataSpecs.can detect explicit dependencies for Math.Numerics.FSharp" /><Add Test="Paket.NugetVersionRangeSerializerSpecs.can format prereleases" /><Add Test="Paket.UtilsSpecs.disposable env var should restore previous value" /><Add Test="Paket.RestrictionFilterSpecs.should filter &gt;= net40 &lt; net46 and net45" /><Add Test="Paket.NuspecWriterSpecs.should not serialize files" /><Add Test="Paket.FilterVersionSpecs.can check if in range for Specific" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with no strategy" /><Add Test="Paket.DependenciesFile.SaveSpecs.should serialize config with comments" /><Add Test="Paket.NuspecSpecs.can detect explicit dependencies for Fantomas" /><Add Test="Paket.BindingRedirects.project file containing paket.references is marked for binding redirect" /><Add Test="Paket.RemotePushUrlSpecs.custom host that includes endpoint and custom endpoint yields host + customendpoint" /><Add Test="Paket.BindingRedirects.redirects got properly indented for readability in sample doc with runtime" /><Add Test="Paket.NugetVersionRangeParserSpecs.can detect maximum version" /><Add Test="Paket.FilterVersionSpecs.can support rc version" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with NuGet http v3 feed" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config without quotes but lots of whitespace" /><Add Test="Paket.NuspecSpecs.can detect framework assemblies for Microsoft.Framework.Logging" /><Add Test="Paket.UtilsSpecs.get https env proxy no port nor credentials" /><Add Test="Paket.InstallModel.Given a path.it should ignore 'portable-'" /><Add Test="Paket.UtilsSpecs.relative path with drive letter" /><Add Test="Paket.TemplateFile.Test.Valid file input recognised as valid(&quot;type project\nowners\n    Thomas Petricek, David Thomas, Ryan Riley, Steffen Forkmann\nauthors\n    Thomas Petricek, David Thomas, Ryan Riley, Steffen Forkmann\nprojectUrl\n    http://fsprojects.github.io/FSharpx.Async/\niconUrl\n    http://fsprojects.github.io/FSharpx.Async/img/logo.png\nlicenseUrl\n    http://fsprojects.github.io/FSharpx.Async/license.html\nrequireLicenseAcceptance\n    false\ncopyright\n    Copyright 2015\ntags\n    F#, async, fsharpx\nsummary\n    Async extensions for F#\ndescription\n    Async extensions for F#\n\n&quot;)" /><Add Test="Paket.InstallModel.FrameworkConditionsSpecs.should create nested condition for full .NET Framework and Silverlight" /><Add Test="Paket.ConflictGraphSpecs.should override graph2 conflict to first version" /><Add Test="Paket.ExtractPackageSpecs.should report blocked download" /><Add Test="Paket.ProjectFile.OutputSpecs.should detect output path for proj file(&quot;Project1&quot;,&quot;Debug&quot;)" /><Add Test="Paket.SemVerSpecs.can parse strange versions" /><Add Test="Paket.NuGetConfigSpecs.ignores disabled nuget feed from upstream" /><Add Test="Paket.ProjectFile.ProjectLanguageSpecs.Language is detected from ProjectTypeGuids" /><Add Test="Paket.InstallModel.Given a list of paths+when I get the supported target profiles.it should not contain profile 41" /><Add Test="Paket.TemplateFile.Test.Detect dependencies with LOCKEDVERSION correctly" /><Add Test="Paket.SemVerSpecs.can parse semver strings" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should update packages with paket package resolution strategy" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate updates all packages from all groups if no group is specified" /><Add Test="Paket.RemotePushUrlSpecs.custom host that includes endpoint and no custom enpoint does not append default endpoint" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read simple config with additional comment" /><Add Test="Paket.TemplateFile.Test.Detect dependencies with CURRENTVERSION correctly" /><Add Test="Paket.NuspecSpecs.can detect explicit references" /><Add Test="Paket.InstallModel.ProcessingSpecs.should handle lib install of Fantomas 1.5.0 with explicit references" /><Add Test="Paket.ProjectFile.ConditionSpecs.should detect net" /><Add Test="Paket.DependenciesFile.DependencyChangesSpecs.should detect incompatible version requirement change for nuget package" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with NuGet v3 feed" /><Add Test="Paket.BindingRedirects.does not add a new binding redirect if one already exists for the assembly" /><Add Test="Paket.TemplateFile.Test.Valid file input recognised as valid(&quot;type project\ntitle Chessie.Rop\nowners\n    Steffen Forkmann, Max Malook, Tomasz Heimowski\nauthors\n    Steffen Forkmann, Max Malook, Tomasz Heimowski\nprojectUrl\n    http://github.com/fsprojects/Chessie\niconUrl\n    https://raw.githubusercontent.com/fsprojects/Chessie/master/docs/files/img/logo.png\nlicenseUrl\n    http://github.com/fsprojects/Chessie/blob/master/LICENSE.txt\nrequireLicenseAcceptance\n    false\ncopyright\n    Copyright 2015\nLANGUAGE\n    en-gb\ntags\n    rop, fsharp F#\nsummary\n    Railway-oriented programming for .NET\ndependencies\n     FSharp.Core 4.3.1\n     My.OtherThing\nexcludeddependencies\n      Newtonsoft.Json\n      Chessie\ndescription\n    Railway-oriented programming for .NET&quot;)" /><Add Test="Paket.DependencySetSpecs.filtered with Between restriction should filter non-matching" /><Add Test="Paket.NuspecSpecs.can detect explicit references for Fantomas" /><Add Test="Paket.DependenciesFile.SaveSpecs.should serialize config with framework restrictions" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with combined strategy" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read http file references from config" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should update packages with new version" /><Add Test="GlobalOptimisticStrategySpecs.should favor global strategy to resolve strategy override conflicts" /><Add Test="Paket.ProjectDependencySpecs.project references for empty project should be empty" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read source file from config" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should add pinned package version to last group" /><Add Test="Paket.DependenciesFile.VersionRequirementSpecs.can parse twiddle-wakka with prerelease" /><Add Test="Paket.Resolver.GlobalPessimisticStrategySpecs.should respect overrides when updating single package" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with very similar feeds" /><Add Test="Paket.DependenciesFile.VersionRangeSpecs.can detect specific version" /><Add Test="Paket.LockFile.ParserSpecs.should parse and serialise groups lockfile" /><Add Test="Paket.InstallModel.ProcessingSpecs.should handle lib install of MicrosoftBcl" /><Add Test="Paket.InstallModel.FrameworkConditionsSpecs.should create nested condition for two .NET Frameworks in different order" /><Add Test="Paket.DependencySetSpecs.filtered with AtLeast restriction should filter non-matching" /><Add Test="Paket.InstallModel.Given a target platform.it should return no penalty for the same platform" /><Add Test="Paket.Requirements.RestrictionApplicationSpecs.&gt;= net452 contains 4.5.2 and following versions" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with reference condition" /><Add Test="Paket.FilterVersionSpecs.can support &quot;build&quot; version" /><Add Test="Paket.NuspecSpecs.if nuspec is not found we assume no framework references" /><Add Test="Paket.RestrictionFilterSpecs.should filter &gt;= net40 &lt; net45 and net45" /><Add Test="Paket.NugetVersionRangeParserSpecs.can detect &quot;null&quot; version" /><Add Test="Paket.TemplateFile.Test.Detect framework references correctly" /><Add Test="Paket.LockFile.ParserSpecs.should parse own lock file" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read http source file from config without quotes with file specs" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should add Microsoft.AspNet.WebApi package to very first group" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should add package to new group" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate considers package name case difference" /><Add Test="Paket.InstallModel.Given a path.it should return 1 for a compatible portable profile" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should add Moq to second feed" /><Add Test="Paket.ProjectFile.ConditionSpecs.should detect framework version from uppercase path" /><Add Test="Paket.LockFile.ParserSpecs.should parse lockfile with multiple feeds" /><Add Test="Paket.Resolver.SimpleDependenciesSpecs.should resolve fixed config" /><Add Test="Paket.RestrictionFilterSpecs.should filter &gt;= net40 and net40" /><Add Test="Paket.ProjectFile.OutputSpecs.should remove missing files that exist in the project" /><Add Test="Paket.InstallModel.Given a list of paths.it should prefer (older) full .NET frameworks over portable class libraries" /><Add Test="Paket.InstallModel.ProcessingSpecs.should skip buckets which contain placeholder while adjusting upper versions" /><Add Test="Paket.InstallModel.FrameworkIdentifierSpecs.should understand basic framework versions net20, net40, net45 ..." /><Add Test="Paket.LockFile.GenerationWithMutlipleSourcesSpecs.should generate lock file" /><Add Test="Paket.InstallModel.Given a list of paths.it should find no match for Silverlight 4" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate does not update any package when it is neither updating all nor selective updating" /><Add Test="Paket.Resolver.GlobalPessimisticStrategySpecs.should favor strategy from parent when it overrides" /><Add Test="Paket.LockFile.ParserWithMultipleSourcesSpecs.should parse lock file" /><Add Test="Paket.Resolver.CasingSpecs.should resolve conflicting casing in package" /><Add Test="Paket.LockFile.GenerateAuthModeSpecs.should generate no auth in lock file" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read no targets import config" /><Add Test="Paket.NugetVersionRangeSerializerSpecs.can format range version" /><Add Test="Paket.UtilsSpecs.normalize path with home directory" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should update packages with nuget package resolution strategy" /><Add Test="Paket.DependencySetSpecs.filtered with concrete restriction should filter non-matching" /><Add Test="Paket.DependenciesFile.SaveSpecs.should serialize config with envrionment variable password" /><Add Test="Paket.TemplateFile.Test.disallow the space to avoid ambiguity in exclusion file pattern" /><Add Test="Paket.DependenciesFile.SaveSpecs.should serialize remote files in config" /><Add Test="Paket.NuspecSpecs.can detect all references for log4net" /><Add Test="Paket.TemplateFile.Test.Detect references correctly" /><Add Test="Paket.RestrictionFilterSpecs.should filter net45 and &gt;= net40 &lt; net45" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should add Microsoft.AspNet.WebApi package in second group in alphabetical pos" /><Add Test="Paket.UtilsSpecs.get http env proxy with port and credentials" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should add new packages before github files" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate does not remove a dependency from group when it is a top-level dependency in that group" /><Add Test="Paket.NuspecSpecs.can detect framework assemblies for Octokit" /><Add Test="Paket.Requirements.RestrictionApplicationSpecs.&gt;= net40 &lt; net451 contains 4.0 and 4.5" /><Add Test="Paket.InstallModel.ProcessingSpecs.should only handle dll and exe files" /><Add Test="Paket.ReferencesFileSpecs.should parse and serialize lines with multiple settings settings correctly" /><Add Test="Paket.LockFile.GeneratorSpecs.should generate lock file with no targets import for packages" /><Add Test="Paket.LockFile.ParserSpecs.should parse redirects lock file and packages" /><Add Test="Paket.DependenciesFile.DependencyChangesSpecs.should detect new github dependency in new group" /><Add Test="Paket.NuspecSpecs.can detect developmentDependency for LiteGuard.Source" /><Add Test="Paket.Resolver.GlobalPessimisticStrategySpecs.should resolve simple config3" /><Add Test="Paket.ConflictGraphSpecs.should override graph2 conflict to second version" /><Add Test="Paket.DependenciesFile.SaveSpecs.should serialize simple config" /><Add Test="Paket.DependenciesFile.SaveSpecs.should serialize simplestConfig" /><Add Test="Paket.InstallModel.ProcessingSpecs.should handle lib install of Fantomas 1.5" /><Add Test="Paket.NuspecSpecs.can detect dependencies for SqlCLient" /><Add Test="Paket.LockFile.QuerySpecs.should detect direct dependencies" /><Add Test="Paket.DependencySetSpecs.should optimize 2 restriction set with only exactly and client framework" /><Add Test="Paket.InstallModel.Xml.RemoveOldNodesSpecs.should generate Xml for Fuchu 0.4" /><Add Test="Paket.InstallModel.Xml.MicrosoftCodeAnalysisAnalyzersSpecs.should generate Xml for RefactoringEssentials in VisualBasic project" /><Add Test="Paket.InstallModel.ProcessingSpecs.should handle lib install of Microsoft.Net.Http for .NET 4.5" /><Add Test="Paket.InstallModel.Given a target platform.it should return &gt; 1000 for an incompatible platform" /><Add Test="Paket.DependenciesFile.SaveSpecs.should serialize config with no imports" /><Add Test="GlobalOptimisticStrategySpecs.should respect overrides when updating single package" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with local source" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should pin down version requirement during add" /><Add Test="Paket.InstallModel.ProcessingSpecs.should install single client profile lib for everything" /><Add Test="Paket.TemplateFile.Test.Parsing minimal file based packages works(&quot;type file\nID My.Thing\nauthors Bob McBob\nDESCRIPTION\n    A longer description\n    on two lines.\nversion\n    1.0\n&quot;,&quot;A longer description\non two lines.&quot;)" /><Add Test="Paket.ProjectFile.OutputSpecs.should detect assembly name for Project1 proj file" /><Add Test="Paket.FilterVersionSpecs.prerelase version of same version is in range" /><Add Test="Paket.ReferencesFileSpecs.should parse reffiles with reference condition" /><Add Test="Paket.TemplateFile.Test.skip empty lines correctly" /><Add Test="Paket.DependenciesFile.RemovePackageSpecs.should remove only the correct package from the correct group" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with password in env variable" /><Add Test="Paket.InstallModel.Xml.CodeCrackerSpecs.should generate Xml for codecracker.VisualBasic" /><Add Test="Paket.LockFile.GenerateWithOptionsSpecs.should generate strategy min lock file" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should add package to existing group with only remote files" /><Add Test="Paket.InstallModel.ProcessingSpecs.should handle props files" /><Add Test="Paket.InstallModel.Xml.SQLiteSpecs.should generate Xml for SQLite" /><Add Test="Paket.NuspecSpecs.can detect framework assemblies for FluentAssertions" /><Add Test="Paket.Simplifier.BasicScenarioSpecs.should simplify multiple framework restrictions in every group" /><Add Test="Paket.SemVerSpecs.can compare 4-parts semvers" /><Add Test="Paket.InstallModel.Xml.CodeCrackerSpecs.should generate Xml for codecracker.CSharp" /><Add Test="Paket.Resolver.CasingSpecs.should resolve wrong casing in package dependency" /><Add Test="Paket.InstallModel.ProcessingSpecs.should install net40 for client profile" /><Add Test="Paket.InstallModel.AnalyzerSpecs.Other directory name is Any" /><Add Test="Paket.ReferencesFileSpecs.should parse lines with trailing whitspace correctly" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate generates paket.lock correctly" /><Add Test="Paket.ProjectFile.ConditionSpecs.should detect client framework version from path" /><Add Test="Paket.SemVerSpecs.should parse paket prerelease versions" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should add Microsoft.AspNet.WebApi package in correct position if package is already given" /><Add Test="Paket.ProjectFile.OutputSpecs.should detect output path for proj file(&quot;Project3&quot;,&quot;Debug&quot;)" /><Add Test="Paket.DependenciesFile.VersionRequirementSpecs.can order twiddle-wakka" /><Add Test="Paket.ReferencesFileSpecs.should parse reffiles with explicit main group" /><Add Test="Paket.ReadPackagesConfigSpecs.can read xunit.visualstudio.packages.config" /><Add Test="Paket.SemVerSpecs.can normalize versions" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate updates a single constrained package" /><Add Test="Paket.RemotePushUrlSpecs.no host with custom endpoint yields nuget host with default endpoint" /><Add Test="Paket.DependenciesFile.SaveSpecs.should serialize config with password" /><Add Test="Paket.UtilsSpecs.get http env proxy no port nor credentials" /><Add Test="Paket.InstallModel.Xml.ManualNodesSpecs.should delete custom nodes if there are some" /><Add Test="Paket.RestrictionFilterSpecs.should filter &gt;=net40 and &gt;= net45" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with redirects" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with nested group" /><Add Test="Paket.DependenciesFile.DependencyChangesSpecs.should detect no changes with global framework" /><Add Test="Paket.ReferencesFileSpecs.should serialize CopyLocal correctly" /><Add Test="Paket.InstallModel.Given a path.it should return no penalty for a matching portable profile" /><Add Test="Paket.LockFile.ParserSpecs.should parse framework restricted lock file" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should pin Microsoft.AspNet.WebApi.Client package in correct position" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read gist source file from config without quotes with file specs" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should add Microsoft.AspNet.WebApi package in first group in alphabetical pos" /><Add Test="Paket.NugetVersionRangeSerializerSpecs.can format maximum version" /><Add Test="Paket.ReferencesFileSpecs.should parse reffiles with redirects" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate updates package that has a new dependent package that also is a direct dependency" /><Add Test="Paket.DependenciesFile.ParserSpecs.should not read config with invalid settings" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate removes a dependency when it updates a single package and it is updated to a version that does not depend on a library" /><Add Test="Paket.DependenciesFile.VersionRangeSpecs.can detect minimum NuGet version" /><Add Test="Paket.BindingRedirects.correctly updates an existing binding redirect" /><Add Test="Paket.DependenciesFile.VersionRangeSpecs.can detect lower versions for ~&gt;" /><Add Test="Paket.InstallModel.Xml.StyleCopSpecs.should generate Xml for StyleCop.MSBuild" /><Add Test="Paket.NuGetConfigSpecs.can detect cleartextpasswords in nuget.config" /><Add Test="Paket.InstallModel.Xml.RxXaml.should generate Xml for Rx-XAML 2.2.4 with correct framework assembly references" /><Add Test="Paket.LockFile.ParserSpecs.should parse framework restricted lock file in new syntax" /><Add Test="Paket.InstallModel.Xml.FantomasSpecs.should generate full Xml with reference condition and framework restrictions without msbuild warning" /><Add Test="GlobalOptimisticStrategySpecs.should update to lastest when updating all" /><Add Test="Paket.ODataSpecs.can detect explicit dependencies for Fantomas" /><Add Test="Paket.RemotePushUrlSpecs.can combine host and endpoint with leading slash on endpoint and trailing slash on host" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate updates only packages from specific group if group is specified" /><Add Test="Paket.TemplateFile.Test.Detect mutliple exclude files correctly" /><Add Test="Paket.LockFile.GeneratorSpecs.should generate lock file for source files" /><Add Test="Paket.NuspecSpecs.can detect framework assemblies for MathNet.Numerics" /><Add Test="Paket.ConfigFileSpecs.get source nodes" /><Add Test="Paket.ProjectFile.InterProjectDependencySpecs.should detect Paket dependency in Project1 proj file" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should add Microsoft.AspNet.WebApi package in first position if only source is given" /><Add Test="Paket.ReferencesFileSpecs.should remove nuget from group and delete empty group" /><Add Test="Paket.SemVerSpecs.should accept version with minus in prerelease" /><Add Test="Paket.InstallModel.FrameworkIdentifierSpecs.should serialize basic framework versions net20, net40, net45 ..." /><Add Test="Paket.ProjectFile.ProjectLanguageSpecs.Confusion in ProjectTypeGuids is unknown" /><Add Test="Paket.FilterVersionSpecs.can check if in range for 4-parts range" /><Add Test="Paket.ReferencesFileSpecs.should parse reffiles with nested groups" /><Add Test="Paket.ProjectFile.OutputSpecs.should detect output path for proj file(&quot;Project3&quot;,&quot;Release&quot;)" /><Add Test="Paket.UtilsSpecs.absolute path on unixoid systems" /><Add Test="Paket.TemplateFile.Test.Invalid file input recognised as invalid(&quot;type fil\nid My.Thing\nversion 1.0\nauthors Bob McBob\ndescription A short description\n&quot;)" /><Add Test="Paket.ProjectDependencySpecs.project reference for single dependency should be found" /><Add Test="Paket.InstallModel.Xml.LibGit2SharpSpecs.should generate Xml for LibGit2Sharp 2.0.0" /><Add Test="Paket.InstallModel.Xml.MicrosoftCodeAnalysisAnalyzersSpecs.should generate Xml for Microsoft.CodeAnalysis.Analyzers 1.0.0-rc2" /><Add Test="Paket.LockFile.ParserSpecs.should parse simple http reference" /><Add Test="Paket.DependenciesFile.RemovePackageSpecs.should keep stable if group doesn't exist" /><Add Test="Paket.ProjectFile.FileBuildActionSpecs.should recognize compilable files" /><Add Test="Paket.ReferencesFileSpecs.should remove nuget from group" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate updates package that conflicts with transitive dependency with correct prerelease version" /><Add Test="Paket.InstallModel.ProcessingSpecs.should add net35 if we have net20 and net40" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should add Microsoft.AspNet.WebApi package to third group in alphabetical pos" /><Add Test="Paket.NuspecSpecs.can detect all references for ReadOnlyCollectionExtions" /><Add Test="Paket.InstallModel.Xml.FantomasLibSpecs.should generate Xml for Fantomas 1.5" /><Add Test="Paket.ODataSpecs.can detect explicit dependencies for Fleece" /><Add Test="Paket.NugetVersionRangeParserSpecs.can detect latest version" /><Add Test="Paket.NuspecSpecs.can detect empty dependencies for log4net" /><Add Test="Paket.DependencySetSpecs.should optimize real world restrictions" /><Add Test="Paket.FrameworkReferencesSpecs.should detect references in project1" /><Add Test="Paket.UtilsSpecs.relative local path is returned as is" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should add pinned package version to third group" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate does not update when package conflicts with a transitive dependency" /><Add Test="Paket.Resolver.GlobalPessimisticStrategySpecs.should favor strategy from parent that overrides strategy" /><Add Test="Paket.DependenciesFile.SaveSpecs.should serialize packet's own config" /><Add Test="Paket.BindingRedirects.redirects got properly indented for readability in real world sample docs" /><Add Test="Paket.SemVerSpecs.can parse MBrace semver strings" /><Add Test="Paket.LockFile.GenerateWithOptionsSpecs.should generate strict lock file" /><Add Test="Paket.RestrictionFilterSpecs.should filter &gt;= net40 and portable" /><Add Test="Paket.Resolver.SimpleDependenciesSpecs.should resolve fixed config4" /><Add Test="Paket.NuspecSpecs.can detect all references" /><Add Test="Paket.LockFile.QuerySpecs.should detect when packages are unrelated" /><Add Test="Paket.ProjectFile.ConditionSpecs.should detect net45-full" /><Add Test="Paket.InstallModel.Xml.ManualNodesSpecs.should find custom nodes in doc" /><Add Test="Paket.DependencyGraphSpecs.should analyze graph2 completely" /><Add Test="Paket.NuspecSpecs.can detect explicit dependencies for ReadOnlyCollectionExtensions" /><Add Test="Paket.InstallModel.Xml.SystemNetHttpForNet2Specs.should generate Xml for System.Net.Http 2.2.8" /><Add Test="Paket.DependenciesFile.AddPackageSpecs.should add new packages with specific version if we give it" /><Add Test="Paket.ProjectFile.InterProjectDependencySpecs.should detect solution path for dependencies in Project4 proj file" /><Add Test="Paket.BindingRedirects.correctly creates a binding redirect with default culture" /><Add Test="Paket.NugetVersionRangeSerializerSpecs.can format minimum version" /><Add Test="Paket.NugetVersionRangeSerializerSpecs.can format latest version" /><Add Test="Paket.LockFile.QuerySpecs.should detect itself as dependency" /><Add Test="Paket.RemotePushUrlSpecs.can combine host and endpoint with missing leading slash on endpoint" /><Add Test="Paket.UtilsSpecs.no env proxy without http_proxy env var" /><Add Test="Paket.LockFile.GeneratorSpecs.should generate lock file for http and gist source files" /><Add Test="Paket.BindingRedirects.add missing elements to configuration file" /><Add Test="Paket.LockFile.ParserSpecs.should parse strategy min lock file" /><Add Test="Paket.InstallModel.Xml.SystemNetHttpWithExistingFramweworkReferencesSpecs.should generate Xml for System.Net.Http 2.2.8" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate updates package from a specific group" /><Add Test="Paket.LockFile.ParserSpecs.should parse and serialise multiple feed lockfile" /><Add Test="Paket.ODataSpecs.can detect explicit dependencies for Math.Numerics" /><Add Test="Paket.Resolver.ConflictSourcesSpecs.should fail resolving same source files from same repository but different versions" /><Add Test="Paket.ProjectDependencySpecs.project reference for dependencies simple config should be found" /><Add Test="Paket.ReferencesFileSpecs.should parse link:false correctly" /><Add Test="Paket.InstallModel.ProcessingSpecs.should understand lib in lib.dll" /><Add Test="Paket.DependencySetSpecs.should optimize 2 restriction sets with between" /><Add Test="Paket.Resolver.PessimisticStrategySpecs.should resolve simple config1" /><Add Test="Paket.LockFile.ParserSpecs.should parse strict lock file" /><Add Test="Paket.ProjectFile.ProjectLanguageSpecs.Language is detected from filename" /><Add Test="Paket.DependencyGraphSpecs.should report missing versions" /><Add Test="Paket.DependenciesFile.VersionRangeSpecs.can detect override operator" /><Add Test="Paket.NuspecSpecs.can detect explicit dependencies for FluentAssertions 4" /><Add Test="Paket.InstallModel.ProcessingSpecs.should handle lib install of Microsoft.Net.Http 2.2.28" /><Add Test="Paket.BindingRedirects.correctly creates a binding redirect" /><Add Test="Paket.InstallModel.FrameworkConditionsSpecs.should create simple condition for simple .NET Framework" /><Add Test="Paket.UtilsSpecs.get https env proxy with port no credentials" /><Add Test="Paket.InstallModel.Xml.SystemNetHttpWithFramweworkReferencesSpecs.should generate Xml for System.Net.Http 2.2.8" /><Add Test="Paket.InstallModel.Xml.MicrosoftCodeAnalysisAnalyzersSpecs.can remove analyzer paket nodes" /><Add Test="Paket.AddingDependenciesSpecs.should find castle.core alone" /><Add Test="Paket.FilterVersionSpecs.can check if in range for GreaterThan" /><Add Test="Paket.NugetVersionRangeParserSpecs.can detect minimum version for pre-releases" /><Add Test="Paket.TemplateFile.Test.Invalid file input recognised as invalid(&quot;type file\nid My.Thing\nversion 1.0\ndescription A short description\n&quot;)" /><Add Test="Paket.SemVerSpecs.can normalize CI versions in prerelease" /><Add Test="Paket.RemotePushUrlSpecs.default result is nuget host with default endpoint" /><Add Test="Paket.InstallModel.Given a path.it should split it into the right platforms" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate updates package that conflicts with a deep transitive dependency in its own graph with correct version" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with target framework" /><Add Test="Paket.DependenciesFile.VersionRangeSpecs.can detect ordinary Between" /><Add Test="Paket.LockFile.GeneratorSpecs.should parse and regenerate http Stanford.NLP.NET project" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read config with duplicate NuGet source" /><Add Test="Paket.ProjectFile.InterProjectDependencySpecs.should detect path for dependencies in Project2 proj file" /><Add Test="Paket.NuspecSpecs.if nuspec is not found we assume all references" /><Add Test="Paket.UpdateProcess.Test.SelectiveUpdate conflicts when a dependency is contrained" /><Add Test="Paket.DependenciesFile.VersionRangeSpecs.can detect greater-than" /><Add Test="Paket.BindingRedirects.redirects got properly indented for readability in empty sample docs" /><Add Test="Paket.RemotePushUrlSpecs.custom host with no endpoint yields custom host with default endpoint" /><Add Test="Paket.NugetVersionRangeParserSpecs.can detect range version" /><Add Test="Paket.ODataSpecs.can detect explicit dependencies for WindowsAzure.Storage" /><Add Test="Paket.ProjectFile.OutputSpecs.should maintain order when updating project file items" /><Add Test="Paket.LockFile.ParserSpecs.should parse redirects lock file" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read http binary references from config" /><Add Test="Paket.InstallModel.Xml.SystemNetHttpSpecs.should generate Xml for System.Net.Http 2.2.8" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read http source file from config without quotes, parsing rules" /><Add Test="Paket.DependenciesFile.ParserSpecs.should report error on invalid prerelease string" /><Add Test="Paket.DependenciesFile.DependencyChangesSpecs.should detect addition content:none of single nuget package" /><Add Test="Paket.Resolver.GlobalPessimisticStrategySpecs.should resolve simple config2" /><Add Test="Paket.ReferencesFileSpecs.should parse lines with import_targets settings correctly" /><Add Test="Paket.InstallModel.FrameworkIdentifierSpecs.should understand basic silverlight" /><Add Test="Paket.ProjectFile.OutputSpecs.should detect assembly name for Project2 proj file" /><Add Test="Paket.UtilsSpecs.get https env proxy with port and credentials" /><Add Test="Paket.PackagingProcess.Test.Loading assembly metadata works" /><Add Test="Paket.DependenciesFile.DependencyChangesSpecs.should detect if nothing changes in github dependency" /><Add Test="Paket.UtilsSpecs.relative path with local identifier on unxoid systems" /><Add Test="Paket.InstallModel.Given an empty path.it should be okay to use from a portable profile" /><Add Test="Paket.ReferencesFileSpecs.should add nuget package to different groups" /><Add Test="Paket.Simplifier.BasicScenarioSpecs.should simplify framework restrictions in main group" /><Add Test="Paket.DependencyGraphSpecs.should analyze graph2 completely with multiple starting nodes" /><Add Test="StrategySpecs.should favor max strategy to resolve strategy override conflicts" /><Add Test="Paket.DependencySetSpecs.should optimize 2 restriction set with only exactly" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read packages with redirects" /><Add Test="Paket.Resolver.CasingSpecs.should resolve wrong casing in retrieved package" /><Add Test="Paket.LockFile.GenerateWithOptionsSpecs.should generate strategy max lock file" /><Add Test="Paket.InstallModel.ProcessingSpecs.should understand xamarinios" /><Add Test="Paket.NuspecSpecs.can detect dependencies for MathNet.Numerics.FSharp" /><Add Test="Paket.ProjectFile.OutputSpecs.should detect exe output type for Project3 proj file" /><Add Test="Paket.LockFile.GeneratorSpecs.should generate lock file with disabled content for packages" /><Add Test="Paket.DependenciesFile.ParserSpecs.should read gist source file" /><Add Test="Paket.SemVerSpecs.can normalize build zeros" /><Add Test="Paket.InstallModel.Xml.ManualNodesSpecs.should not find custom nodes if there are none" /></Playlist>